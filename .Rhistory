cols = -Var1,
names_to = "Var2",
values_to = "value"
)
ggplot(matriz_correlacao_longa, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "white", size = 5) +
scale_fill_gradient2(
low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1, 1),
name = "Correlação"
) +
theme_minimal() +
labs(
title = "Correlação de Vendas entre Regioes",
x = "", y = ""
)
ggplot(df_vendas_regioes, aes(x = na_sales, y = pal_sales)) +
geom_point(alpha = 0.2, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
title = "Vendas: America do Norte vs. Europa",
x = "Vendas na America do Norte (milhoes)",
y = "Vendas na Europa (milhoes)"
) +
theme_minimal()
################
ggplot(df_vendas_regioes, aes(x = na_sales, y = jp_sales)) +
geom_point(alpha = 0.2, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
title = "Vendas: America do Norte vs. Japao",
x = "Vendas na America do Norte (milhoes)",
y = "Vendas no Japao (milhoes)"
) +
theme_minimal()
library(scales)
df_regional <- df %>%
filter(total_sales > 0.2) %>%
mutate(
jp_prop = jp_sales / total_sales,
na_prop = na_sales / total_sales,
pal_prop = pal_sales / total_sales
)
top_foco_japao <- df_regional %>%
filter(jp_prop > 0.70) %>%
arrange(desc(total_sales)) %>%
head(10) %>%
mutate(tipo_foco = "Foco: Japao")
top_foco_ocidente <- df_regional %>%
filter(jp_prop < 0.05) %>%
arrange(desc(total_sales)) %>%
head(10) %>%
mutate(tipo_foco = "Foco: Ocidente")
df_outliers <- bind_rows(top_foco_japao, top_foco_ocidente)
df_outliers_long <- df_outliers %>%
pivot_longer(
cols = c("jp_prop", "na_prop", "pal_prop"),
names_to = "regiao",
values_to = "proporcao"
) %>%
mutate(regiao = case_when(
regiao == "jp_prop" ~ "Japao",
regiao == "na_prop" ~ "America do Norte",
regiao == "pal_prop" ~ "Europa & Outros"
))
ggplot(df_outliers_long, aes(
x = fct_reorder(title, proporcao, .fun = last),
y = proporcao,
fill = regiao
)) +
geom_col(position = "stack") +
facet_wrap(~ tipo_foco, scales = "free_x") +
scale_y_continuous(labels = percent_format()) +
scale_fill_manual(values = c(
"America do Norte" = "#0072B2",
"Europa & Outros" = "#56B4E9",
"Japao" = "#D55E00"
)) +
labs(
title = "Analise de Outliers: Jogos Famosos em Regioes Especificas",
subtitle = "Comparacao da composicao de vendas dos jogos mais dependentes de cada mercado",
x = "Jogo",
y = "Porcentagem do Total de Vendas",
fill = "Regiao de Venda"
) +
theme_minimal(base_size = 11) +
theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
)
market_share <- df %>%
filter(!is.na(publisher) & !is.na(total_sales)) %>%
group_by(publisher) %>%
summarise(publisher_sales = sum(total_sales, na.rm = TRUE)) %>%
mutate(
total_market_sales = sum(publisher_sales),
share_percent = (publisher_sales / total_market_sales) * 100
) %>%
arrange(desc(share_percent))
ihh_index <- market_share %>%
summarise(ihh = sum(share_percent^2)) %>%
pull(ihh)
print(paste("O Indice Herfindahl-Hirschman (IHH) do mercado e:", round(ihh_index)))
top_publishers_chart <- market_share %>%
head(15) %>%
ggplot(aes(x = share_percent, y = reorder(publisher, share_percent))) +
geom_col(fill = "steelblue") +
geom_text(aes(label = paste0(round(share_percent, 1), "%")), hjust = -0.2, size = 3) +
labs(
title = "Market Share das Top 15 Maiores Publishers",
subtitle = paste("Indice IHH do Mercado Total:", round(ihh_index)),
x = "Market Share (%)",
y = "Publisher"
) +
theme_minimal() +
scale_x_continuous(expand = expansion(mult = c(0, 0.15)))
print(top_publishers_chart)
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal()
###############
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos)
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Relação entre Vendas Totais e Quantidade de Jogos por Franquia - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right") # Posiciona a legenda à direita para melhor visualização
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal()
###############
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos)
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Vendas Totais e qtd de jogos - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right") # Posiciona a legenda à direita para melhor visualização
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal()
###############
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos)
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Vendas Totais e quantidade de jogos - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right") # Posiciona a legenda à direita para melhor visualização
df_franquias
title == "red dead 2" ~ "RDR2",         # Muda "red dead 2" para "RDR2"
TRUE ~ title)
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos) mutate(
df_franquias
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos) mutate(
df_franquias
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos) mutate(
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos) %>%  mutate(
title = case_when(
title == "Red Dead Redemption	" ~ "RDR",         # Muda "red dead 2" para "RDR2"
title == "The Elder Scrolls	" ~ "TES",   # Muda "the elder scrolls" para "TES"
TRUE ~ title) )
df_franquias
df_franquias <- df_franquias %>%  mutate(vendas_por_jogo = vendas_totais / quantidade_de_jogos) %>%  mutate(
title = case_when(
title == "Red Dead Redemption	" ~ "RDR",         # Muda "red dead 2" para "RDR2"
title == "The Elder Scrolls	" ~ "TES",   # Muda "the elder scrolls" para "TES"
TRUE ~ title) )
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Vendas Totais e quantidade de jogos - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 1)) # Posiciona a legenda à direita para melhor visualização
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal(axis.text.x = element_text(angle = 45, hjust = 1))
theme_minimal(axis.text.x = element_text(angle = 45, hjust = 1)
title = "Vendas Totais por Franquia - Gráfico 3",
y = "Vendas Totais (em milhões)"
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal(axis.text.x = element_text(angle = 45, hjust = 1)
###############
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal()
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Vendas Totais e quantidade de jogos - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right") # Posiciona a legenda à direita para melhor visualização
### Analisando as principais franquias de josogs - GTA, Call of Duty, The elder Scrolls, Fifa e Red dead Redemption
df_filtrado <- df_filtrado %>%
mutate(franquia = case_when(
str_detect(title, "GTA|Grand Theft Auto") ~ "GTA",
str_detect(title, "Call of Duty") ~ "Call of Duty",
str_detect(title, "Elder Scrolls|Skyrim|Oblivion|Morrowind") ~ "The Elder Scrolls",
str_detect(title, "FIFA") ~ "FIFA",
str_detect(title, "Red Dead") ~ "Red Dead Redemption",
TRUE ~ "Outros"
))
# Análise das franquias
df_franquias <- df_filtrado %>%
filter(franquia != "Outros") %>%
group_by(franquia) %>%
summarise(
quantidade_de_jogos = n_distinct(title), # jogos únicos, ignorando plataforma
vendas_totais = sum(total_sales, na.rm = TRUE),
media_nota = mean(critic_score, na.rm = TRUE),
.groups = "drop"
)
# Base de dados com resumo das franquias
df_franquias <- df_filtrado %>%
filter(franquia != "Outros") %>%
group_by(franquia) %>%
summarise(
quantidade_de_jogos = n_distinct(title),
vendas_totais = sum(total_sales, na.rm = TRUE),
media_nota = mean(critic_score, na.rm = TRUE),
.groups = "drop"
)
df_count <- df_filtrado %>%
filter(franquia != "Outros") %>%
count(franquia, name = "quantidade_de_jogos")
max_qtd <- max(df_count$quantidade_de_jogos)
ggplot(df_count, aes(x = quantidade_de_jogos, y = reorder(franquia, quantidade_de_jogos))) +
geom_segment(aes(x = 0, xend = quantidade_de_jogos, yend = franquia), color = "steelblue", linewidth = 2) +
geom_point(color = "steelblue", size = 4) +
geom_text(aes(label = quantidade_de_jogos), hjust = -0.3, size = 4, color = "grey") +
labs(
title = "Quantidade de Jogos por Franquia - Gráfico 2",
x = "Quantidade de Jogos",
y = "Franquia"
) +
theme_minimal() +
coord_cartesian(xlim = c(0, max_qtd * 1.2))
### Importar bibliotecas
getwd()
#setwd("C:\\Users\\rseit\\OneDrive\\Área de Trabalho\\trabalhoR")
setwd("C:\\Users\\dipis\\OneDrive\\Documentos\\Trabalho R")
library(renv)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(dplyr)
library(stringr)
library(waffle)
library(tinytex)
### Vai colar o repositório do github que está o trabalho do R
#clone("https://github.com/diegopiresss/Trabalho---video_games_sales", "Trabalho R")
#df <- read_csv("C:\\Users\\rseit\\OneDrive\\Área de Trabalho\\dados_games_a.csv")
df<- read_csv("dados_games_a.csv")
df <- df %>% select(-img)
df
#unique(df$console)
#unique(df$genre)
#unique(df$publisher)       não deixar esse unique, muito grande, usei só para ver o que ia ter que dropar
#unique(df$developer)
### Começando a fazer uma limpeza básica, removendo os consoles que tem menos do que 200 jogos
df <- df %>% filter(!console %in% c("SCD", "3D0", "GG", "MS", "PCE", "WW", "2600", "DC", "VC", "GC", "OSX", "And", "All","DSiW"))
df_filtrado <- df %>%
group_by(console) %>%
filter(n() >= 200) %>%
ungroup()
df_filtrado
ggplot(df_filtrado, aes(x = fct_infreq(console))) +
geom_bar(width = 0.5, color = 'steelblue', fill = 'lightblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Consoles", y = "Quantidade de jogos", title = "Quantidade de jogos por plataforma")
## Gráfico para saber quais foram os 20 jogos mais vendidos
df_resumido <- df %>%
group_by(title) %>%
summarise(
total_sales = sum(total_sales, na.rm = TRUE),
publisher = first(publisher)
) %>%
arrange(desc(total_sales))
## Filtrar os jogos por colunas
df %>% filter(title == "Grand Theft Auto V")
top20jogos <- df %>% group_by(title) %>%  summarise(total_vendas_titulo = sum(total_sales, na.rm = TRUE)) %>% arrange(desc(total_vendas_titulo)) %>% head(20)
top20jogos
top20jogos$title <- factor(top20jogos$title, levels = top20jogos$title)
ggplot(data = top20jogos, aes(x= title, y = total_vendas_titulo)) +
geom_col(color = "steelblue", fill = "lightblue") +
labs(title = '20 Jogos mais vendidos - Gráfico 1', x = 'Título', y = 'Vendas (em milhões)') +
coord_flip() +
theme_minimal()
### Analisando as principais franquias de josogs - GTA, Call of Duty, The elder Scrolls, Fifa e Red dead Redemption
df_filtrado <- df_filtrado %>%
mutate(franquia = case_when(
str_detect(title, "GTA|Grand Theft Auto") ~ "GTA",
str_detect(title, "Call of Duty") ~ "Call of Duty",
str_detect(title, "Elder Scrolls|Skyrim|Oblivion|Morrowind") ~ "The Elder Scrolls",
str_detect(title, "FIFA") ~ "FIFA",
str_detect(title, "Red Dead") ~ "Red Dead Redemption",
TRUE ~ "Outros"
))
# Análise das franquias
df_franquias <- df_filtrado %>%
filter(franquia != "Outros") %>%
group_by(franquia) %>%
summarise(
quantidade_de_jogos = n_distinct(title), # jogos únicos, ignorando plataforma
vendas_totais = sum(total_sales, na.rm = TRUE),
media_nota = mean(critic_score, na.rm = TRUE),
.groups = "drop"
)
# Base de dados com resumo das franquias
df_franquias <- df_filtrado %>%
filter(franquia != "Outros") %>%
group_by(franquia) %>%
summarise(
quantidade_de_jogos = n_distinct(title),
vendas_totais = sum(total_sales, na.rm = TRUE),
media_nota = mean(critic_score, na.rm = TRUE),
.groups = "drop"
)
df_count <- df_filtrado %>%
filter(franquia != "Outros") %>%
count(franquia, name = "quantidade_de_jogos")
max_qtd <- max(df_count$quantidade_de_jogos)
ggplot(df_count, aes(x = quantidade_de_jogos, y = reorder(franquia, quantidade_de_jogos))) +
geom_segment(aes(x = 0, xend = quantidade_de_jogos, yend = franquia), color = "steelblue", linewidth = 2) +
geom_point(color = "steelblue", size = 4) +
geom_text(aes(label = quantidade_de_jogos), hjust = -0.3, size = 4, color = "grey") +
labs(
title = "Quantidade de Jogos por Franquia - Gráfico 2",
x = "Quantidade de Jogos",
y = "Franquia"
) +
theme_minimal() +
coord_cartesian(xlim = c(0, max_qtd * 1.2))
### Gráficos de vendas totais por franquia
ggplot(df_franquias, aes(x = franquia, y = vendas_totais)) +
geom_col(fill = "lightblue", color = "steelblue") +
labs(
title = "Vendas Totais por Franquia - Gráfico 3",
x = "Franquia",
y = "Vendas Totais (em milhões)"
) +
theme_minimal()
###############
# 3. Criar o gráfico de dispersão com o tamanho dos pontos mapeado para 'vendas_por_jogo'
ggplot(df_franquias, aes(x = vendas_totais, y = quantidade_de_jogos, color = franquia)) +
geom_point(aes(size = vendas_por_jogo), # Mapeia o tamanho do ponto para vendas_por_jogo
alpha = 0.8) +             # Transparência para evitar sobreposição
#geom_text(aes(label = franquia),       # Adiciona o rótulo do nome da franquia
#nudge_y = 10,                 # Ajusta a posição vertical do texto
#size = 3.5,                   # Tamanho da fonte do rótulo
#color = "black") +            # Cor do texto para contraste
labs(
title = "Vendas Totais e quantidade de jogos - Gráfico 4",
x = "Vendas Totais da Franquia (em milhões)",
y = "Quantidade de Jogos Lançados",
color = "Franquia",                    # Título da legenda de cores
size = "Vendas por Jogo\n(milhões/título)" # Título da legenda de tamanho
) +
theme_minimal() +
theme(legend.position = "right") # Posiciona a legenda à direita para melhor visualização
### Importar bibliotecas
getwd()
#setwd("C:\\Users\\rseit\\OneDrive\\Área de Trabalho\\trabalhoR")
setwd("C:\\Users\\dipis\\OneDrive\\Documentos\\Trabalho R")
library(renv)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(dplyr)
library(stringr)
library(waffle)
library(tinytex)
### Vai colar o repositório do github que está o trabalho do R
#clone("https://github.com/diegopiresss/Trabalho---video_games_sales", "Trabalho R")
#df <- read_csv("C:\\Users\\rseit\\OneDrive\\Área de Trabalho\\dados_games_a.csv")
df<- read_csv("dados_games_a.csv")
df <- df %>% select(-img)
df
#unique(df$console)
#unique(df$genre)
#unique(df$publisher)       não deixar esse unique, muito grande, usei só para ver o que ia ter que dropar
#unique(df$developer)
### Começando a fazer uma limpeza básica, removendo os consoles que tem menos do que 200 jogos
df <- df %>% filter(!console %in% c("SCD", "3D0", "GG", "MS", "PCE", "WW", "2600", "DC", "VC", "GC", "OSX", "And", "All","DSiW"))
df_filtrado <- df %>%
group_by(console) %>%
filter(n() >= 200) %>%
ungroup()
df_filtrado
ggplot(df_filtrado, aes(x = fct_infreq(console))) +
geom_bar(width = 0.5, color = 'steelblue', fill = 'lightblue') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Consoles", y = "Quantidade de jogos", title = "Quantidade de jogos por plataforma")
## Gráfico para saber quais foram os 20 jogos mais vendidos
df_resumido <- df %>%
group_by(title) %>%
summarise(
total_sales = sum(total_sales, na.rm = TRUE),
publisher = first(publisher)
) %>%
arrange(desc(total_sales))
## Filtrar os jogos por colunas
df %>% filter(title == "Grand Theft Auto V")
top20jogos <- df %>% group_by(title) %>%  summarise(total_vendas_titulo = sum(total_sales, na.rm = TRUE)) %>% arrange(desc(total_vendas_titulo)) %>% head(20)
top20jogos
top20jogos$title <- factor(top20jogos$title, levels = top20jogos$title)
ggplot(data = top20jogos, aes(x= title, y = total_vendas_titulo)) +
geom_col(color = "steelblue", fill = "lightblue") +
labs(title = '20 Jogos mais vendidos - Gráfico 1', x = 'Título', y = 'Vendas (em milhões)') +
coord_flip() +
theme_minimal()
